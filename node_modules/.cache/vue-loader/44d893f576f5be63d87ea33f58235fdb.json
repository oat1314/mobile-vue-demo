{"remainingRequest":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\cube-ui\\src\\components\\scroll\\scroll.vue?vue&type=style&index=0&lang=stylus&rel=stylesheet%2Fstylus&","dependencies":[{"path":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\cube-ui\\src\\components\\scroll\\scroll.vue","mtime":499162500000},{"path":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\stylus-loader\\index.js","mtime":1519606876000},{"path":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\BaiduNetdiskDownload\\思否\\20年spring boot+vue课程源码\\课程源码\\00-前端-后端代码-数据库\\xdclass_front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQHJlcXVpcmUgIi4uLy4uL2NvbW1vbi9zdHlsdXMvdmFyaWFibGUuc3R5bCIKCi5jdWJlLXNjcm9sbC13cmFwcGVyCiAgcG9zaXRpb246IHJlbGF0aXZlCiAgaGVpZ2h0OiAxMDAlCiAgb3ZlcmZsb3c6IGhpZGRlbgoKLmN1YmUtc2Nyb2xsLWxpc3Qtd3JhcHBlcgogIG92ZXJmbG93OiBoaWRkZW4KCi5jdWJlLXB1bGxkb3duLXdyYXBwZXIKICBwb3NpdGlvbjogYWJzb2x1dGUKICB3aWR0aDogMTAwJQogIGxlZnQ6IDAKICBkaXNwbGF5OiBmbGV4CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXIKICBhbGlnbi1pdGVtczogY2VudGVyCiAgdHJhbnNpdGlvbjogYWxsCiAgLmJlZm9yZS10cmlnZ2VyCiAgICBoZWlnaHQ6IDU0cHgKICAgIGxpbmUtaGVpZ2h0OiAwCiAgICBwYWRkaW5nLXRvcDogNnB4CiAgLmFmdGVyLXRyaWdnZXIKICAgIC5sb2FkaW5nCiAgICAgIHBhZGRpbmc6IDhweCAwCiAgICAuY3ViZS1wdWxsZG93bi1sb2FkZWQKICAgICAgcGFkZGluZzogMTJweCAwCgouY3ViZS1wdWxsdXAtd3JhcHBlcgogIHdpZHRoOiAxMDAlCiAgZGlzcGxheTogZmxleAogIGp1c3RpZnktY29udGVudDogY2VudGVyCiAgYWxpZ24taXRlbXM6IGNlbnRlcgogIC5iZWZvcmUtdHJpZ2dlcgogICAgcGFkZGluZzogMjJweCAwCiAgICBtaW4taGVpZ2h0OiAxZW0KICAuYWZ0ZXItdHJpZ2dlcgogICAgcGFkZGluZzogMTlweCAwCgouY3ViZS1zY3JvbGwtY29udGVudAogIHBvc2l0aW9uOiByZWxhdGl2ZQogIHotaW5kZXg6IDEKCi5jdWJlLXNjcm9sbC1pdGVtCiAgaGVpZ2h0OiA2MHB4CiAgbGluZS1oZWlnaHQ6IDYwcHgKICBmb250LXNpemU6ICRmb250c2l6ZS1sYXJnZS14CiAgcGFkZGluZy1sZWZ0OiAyMHB4Cg=="},{"version":3,"sources":["scroll.vue"],"names":[],"mappingsmhBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"scroll.vue","sourceRoot":"node_modules/cube-ui/src/components/scroll","sourcesContent":["<template>\n  <div ref=\"wrapper\" class=\"cube-scroll-wrapper\">\n    <div class=\"cube-scroll-content\">\n      <div ref=\"listWrapper\" class=\"cube-scroll-list-wrapper\">\n        <slot>\n          <ul class=\"cube-scroll-list\">\n            <li\n              class=\"cube-scroll-item border-bottom-1px\"\n              v-for=\"(item, index) in data\"\n              :key=\"index\"\n              @click=\"clickItem(item)\">{{item}}</li>\n          </ul>\n        </slot>\n      </div>\n      <slot name=\"pullup\" :pullUpLoad=\"pullUpLoad\" :isPullUpLoad=\"isPullUpLoad\">\n        <div class=\"cube-pullup-wrapper\" v-if=\"pullUpLoad\">\n          <div class=\"before-trigger\" v-if=\"!isPullUpLoad\">\n            <span>{{ pullUpTxt }}</span>\n          </div>\n          <div class=\"after-trigger\" v-else>\n            <loading></loading>\n          </div>\n        </div>\n      </slot>\n    </div>\n    <div v-if=\"pullDownRefresh\" class=\"cube-pulldown\" ref=\"pulldown\">\n      <slot\n        name=\"pulldown\"\n        :pullDownRefresh=\"pullDownRefresh\"\n        :pullDownStyle=\"pullDownStyle\"\n        :beforePullDown=\"beforePullDown\"\n        :isPullingDown=\"isPullingDown\"\n        :bubbleY=\"bubbleY\">\n        <div class=\"cube-pulldown-wrapper\" :style=\"pullDownStyle\">\n          <div class=\"before-trigger\" v-show=\"beforePullDown\">\n            <bubble :y=\"bubbleY\" class=\"bubble\"></bubble>\n          </div>\n          <div class=\"after-trigger\" v-show=\"!beforePullDown\">\n            <div v-show=\"isPullingDown\" class=\"loading\">\n              <loading></loading>\n            </div>\n            <div v-show=\"!isPullingDown\" class=\"cube-pulldown-loaded\"><span>{{ refreshTxt }}</span></div>\n          </div>\n        </div>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import BScroll from 'better-scroll'\n  import Loading from '../loading/loading.vue'\n  import Bubble from '../bubble/bubble.vue'\n  import scrollMixin from '../../common/mixins/scroll'\n  import deprecatedMixin from '../../common/mixins/deprecated'\n  import { getRect } from '../../common/helpers/dom'\n  import { camelize } from '../../common/lang/string'\n\n  const COMPONENT_NAME = 'cube-scroll'\n  const DIRECTION_H = 'horizontal'\n  const DIRECTION_V = 'vertical'\n  const DEFAULT_REFRESH_TXT = 'Refresh success'\n  const DEFAULT_STOP_TIME = 600\n\n  const EVENT_CLICK = 'click'\n  const EVENT_PULLING_DOWN = 'pulling-down'\n  const EVENT_PULLING_UP = 'pulling-up'\n\n  const EVENT_SCROLL = 'scroll'\n  const EVENT_BEFORE_SCROLL_START = 'before-scroll-start'\n  const EVENT_SCROLL_END = 'scroll-end'\n\n  const NEST_MODE_NONE = 'none'\n  const NEST_MODE_NATIVE = 'native'\n\n  const SCROLL_EVENTS = [EVENT_SCROLL, EVENT_BEFORE_SCROLL_START, EVENT_SCROLL_END]\n\n  const DEFAULT_OPTIONS = {\n    observeDOM: true,\n    click: true,\n    probeType: 1,\n    scrollbar: false,\n    pullDownRefresh: false,\n    pullUpLoad: false\n  }\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [scrollMixin, deprecatedMixin],\n    provide() {\n      return {\n        parentScroll: this\n      }\n    },\n    inject: {\n      parentScroll: {\n        default: null\n      }\n    },\n    props: {\n      data: {\n        type: Array,\n        default() {\n          return []\n        }\n      },\n      scrollEvents: {\n        type: Array,\n        default() {\n          return []\n        },\n        validator(arr) {\n          return arr.every((item) => {\n            return SCROLL_EVENTS.indexOf(item) !== -1\n          })\n        }\n      },\n      // TODO: plan to remove at 1.10.0\n      listenScroll: {\n        type: Boolean,\n        default: undefined,\n        deprecated: {\n          replacedBy: 'scroll-events'\n        }\n      },\n      listenBeforeScroll: {\n        type: Boolean,\n        default: undefined,\n        deprecated: {\n          replacedBy: 'scroll-events'\n        }\n      },\n      direction: {\n        type: String,\n        default: DIRECTION_V\n      },\n      refreshDelay: {\n        type: Number,\n        default: 20\n      },\n      nestMode: {\n        type: String,\n        default: NEST_MODE_NONE\n      }\n    },\n    data() {\n      return {\n        beforePullDown: true,\n        isPullingDown: false,\n        isPullUpLoad: false,\n        pullUpNoMore: false,\n        bubbleY: 0,\n        pullDownStyle: '',\n        pullDownStop: 40,\n        pullDownHeight: 60,\n        pullUpHeight: 0\n      }\n    },\n    computed: {\n      pullDownRefresh() {\n        let pullDownRefresh = this.options.pullDownRefresh\n        if (!pullDownRefresh) {\n          return pullDownRefresh\n        }\n        if (pullDownRefresh === true) {\n          pullDownRefresh = {}\n        }\n        return Object.assign({stop: this.pullDownStop}, pullDownRefresh)\n      },\n      pullUpLoad() {\n        return this.options.pullUpLoad\n      },\n      pullUpTxt() {\n        const pullUpLoad = this.pullUpLoad\n        const txt = pullUpLoad && pullUpLoad.txt\n        const moreTxt = (txt && txt.more) || ''\n        const noMoreTxt = (txt && txt.noMore) || ''\n\n        return this.pullUpNoMore ? noMoreTxt : moreTxt\n      },\n      refreshTxt() {\n        const pullDownRefresh = this.pullDownRefresh\n        return (pullDownRefresh && pullDownRefresh.txt) || DEFAULT_REFRESH_TXT\n      },\n      finalScrollEvents() {\n        const finalScrollEvents = this.scrollEvents.slice()\n\n        if (!finalScrollEvents.length) {\n          this.listenScroll && finalScrollEvents.push(EVENT_SCROLL)\n          this.listenBeforeScroll && finalScrollEvents.push(EVENT_BEFORE_SCROLL_START)\n        }\n        return finalScrollEvents\n      },\n      needListenScroll() {\n        return this.finalScrollEvents.indexOf(EVENT_SCROLL) !== -1 || this.parentScroll\n      }\n    },\n    watch: {\n      data() {\n        setTimeout(() => {\n          this.forceUpdate(true)\n        }, this.refreshDelay)\n      },\n      pullDownRefresh: {\n        handler(newVal, oldVal) {\n          if (newVal) {\n            this.scroll.openPullDown(newVal)\n            if (!oldVal) {\n              this._onPullDownRefresh()\n              this._pullDownRefreshChangeHandler()\n            }\n          }\n\n          if (!newVal && oldVal) {\n            this.scroll.closePullDown()\n            this._offPullDownRefresh()\n            this._pullDownRefreshChangeHandler()\n          }\n        },\n        deep: true\n      },\n      pullUpLoad: {\n        handler(newVal, oldVal) {\n          if (newVal) {\n            this.scroll.openPullUp(newVal)\n            if (!oldVal) {\n              this._onPullUpLoad()\n              this._pullUpLoadChangeHandler()\n            }\n          }\n\n          if (!newVal && oldVal) {\n            this.scroll.closePullUp()\n            this._offPullUpLoad()\n            this._pullUpLoadChangeHandler()\n          }\n        },\n        deep: true\n      }\n    },\n    activated() {\n      /* istanbul ignore next */\n      this.enable()\n    },\n    deactivated() {\n      /* istanbul ignore next */\n      this.disable()\n    },\n    mounted() {\n      this.$nextTick(() => {\n        this.initScroll()\n      })\n    },\n    beforeDestroy() {\n      this.destroy()\n    },\n    methods: {\n      initScroll() {\n        if (!this.$refs.wrapper) {\n          return\n        }\n        this._calculateMinHeight()\n\n        let options = Object.assign({}, DEFAULT_OPTIONS, {\n          scrollY: this.direction === DIRECTION_V,\n          scrollX: this.direction === DIRECTION_H,\n          probeType: this.needListenScroll ? 3 : 1\n        }, this.options)\n\n        this.scroll = new BScroll(this.$refs.wrapper, options)\n\n        this.parentScroll && this.nestMode !== NEST_MODE_NONE && this._handleNestScroll()\n\n        this._listenScrollEvents()\n\n        if (this.pullDownRefresh) {\n          this._onPullDownRefresh()\n          this._pullDownRefreshChangeHandler()\n        }\n\n        if (this.pullUpLoad) {\n          this._onPullUpLoad()\n          this._pullUpLoadChangeHandler()\n        }\n      },\n      disable() {\n        this.scroll && this.scroll.disable()\n      },\n      enable() {\n        this.scroll && this.scroll.enable()\n      },\n      refresh() {\n        this._calculateMinHeight()\n        this.scroll && this.scroll.refresh()\n      },\n      destroy() {\n        this.scroll && this.scroll.destroy()\n        this.scroll = null\n      },\n      scrollTo() {\n        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n      },\n      scrollToElement() {\n        this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments)\n      },\n      clickItem(item) {\n        this.$emit(EVENT_CLICK, item)\n      },\n      async forceUpdate(dirty = false, nomore = false) {\n        if (this.isPullDownUpdating) {\n          return\n        }\n\n        if (this.pullDownRefresh && this.isPullingDown) {\n          this.isPullingDown = false\n          this.isPullDownUpdating = true\n          await this._waitFinishPullDown()\n          this.isPullDownUpdating = false\n          await this._waitResetPullDown(dirty)\n        } else if (this.pullUpLoad && this.isPullUpLoad) {\n          this.isPullUpLoad = false\n          this.scroll.finishPullUp()\n          this.pullUpNoMore = !dirty || nomore\n        }\n\n        dirty && this.refresh()\n      },\n      resetPullUpTxt() {\n        this.pullUpNoMore = false\n      },\n      _listenScrollEvents() {\n        this.finalScrollEvents.forEach((event) => {\n          this.scroll.on(camelize(event), (...args) => {\n            this.$emit(event, ...args)\n          })\n        })\n      },\n      _handleNestScroll() {\n        // waiting scroll initial\n        this.$nextTick(() => {\n          const innerScroll = this.scroll\n          const outerScroll = this.parentScroll.scroll\n          const scrolls = [innerScroll, outerScroll]\n          scrolls.forEach((scroll, index, arr) => {\n            // scroll ended always enable them\n            scroll.on('touchEnd', () => {\n              outerScroll.enable()\n              innerScroll.enable()\n              // when inner scroll reaching boundary, we will disable inner scroll, so when 'touchend' event fire,\n              // the inner scroll will not reset initiated within '_end' method in better-scroll.\n              // then lead to inner and outer scrolls together when we touch and move on the outer scroll element,\n              // so here we reset inner scroll's 'initiated' manually.\n              innerScroll.initiated = false\n            })\n\n            scroll.on('beforeScrollStart', () => {\n              this.touchStartMoment = true\n              const anotherScroll = arr[(index + 1) % 2]\n              anotherScroll.stop()\n              anotherScroll.resetPosition()\n            })\n          })\n\n          innerScroll.on('scroll', (pos) => {\n            // if scroll event triggered not by touch event, such as by 'scrollTo' method\n            if (!innerScroll.initiated || innerScroll.isInTransition) {\n              return\n            }\n\n            if (this.nestMode === NEST_MODE_NATIVE && !this.touchStartMoment) {\n              return\n            }\n\n            const reachBoundary = this._checkReachBoundary(pos)\n            if (reachBoundary) {\n              innerScroll.resetPosition()\n              innerScroll.disable()\n              // Prevent outer scroll have a bouncing step when enabled in 'free' nestMode.\n              outerScroll.pointX = innerScroll.pointX\n              outerScroll.pointY = innerScroll.pointY\n              outerScroll.enable()\n            } else {\n              outerScroll.disable()\n            }\n            this.touchStartMoment = false\n          })\n        })\n      },\n      _checkReachBoundary(pos) {\n        const distX = this.scroll.distX\n        const distY = this.scroll.distY\n        const reachBoundaryX = distX > 0 ? pos.x >= this.scroll.minScrollX : distX < 0 ? pos.x <= this.scroll.maxScrollX : false\n        const reachBoundaryY = distY > 0 ? pos.y >= this.scroll.minScrollY : distY < 0 ? pos.y <= this.scroll.maxScrollY : false\n        const freeScroll = this.scroll.freeScroll\n        const hasHorizontalScroll = this.scroll.hasHorizontalScroll\n        const hasVerticalScroll = this.scroll.hasVerticalScroll\n\n        if (!hasHorizontalScroll && !hasVerticalScroll) {\n          return true\n        }\n\n        if (freeScroll) {\n          return reachBoundaryX || reachBoundaryY\n        }\n\n        let reachBoundary\n        if (this.scroll.movingDirectionX) {\n          reachBoundary = reachBoundaryX\n        } else if (this.scroll.movingDirectionY) {\n          reachBoundary = reachBoundaryY\n        }\n        return reachBoundary\n      },\n      _calculateMinHeight() {\n        const { wrapper, listWrapper } = this.$refs\n        const pullUpLoad = this.pullUpLoad\n        const pullDownRefresh = this.pullDownRefresh\n        let minHeight = 0\n\n        if (pullDownRefresh || pullUpLoad) {\n          const wrapperHeight = getRect(wrapper).height\n          minHeight = wrapperHeight + 1\n          if (pullUpLoad && pullUpLoad.visible) {\n            // minHeight = wrapperHeight + 1 - pullUpHeight, then pullUpLoad text is visible\n            // when content's height is not larger than wrapper height\n            minHeight -= this.pullUpHeight\n          }\n        }\n\n        listWrapper.style.minHeight = `${minHeight}px`\n      },\n      _onPullDownRefresh() {\n        this.scroll.on('pullingDown', this._pullDownHandle)\n        this.scroll.on('scroll', this._pullDownScrollHandle)\n      },\n      _offPullDownRefresh() {\n        this.scroll.off('pullingDown', this._pullDownHandle)\n        this.scroll.off('scroll', this._pullDownScrollHandle)\n      },\n      _pullDownRefreshChangeHandler() {\n        this.$nextTick(() => {\n          this._getPullDownEleHeight()\n          this._calculateMinHeight()\n        })\n      },\n      _pullDownHandle() {\n        if (this.resetPullDownTimer) {\n          clearTimeout(this.resetPullDownTimer)\n        }\n        this.beforePullDown = false\n        this.isPullingDown = true\n        this.$emit(EVENT_PULLING_DOWN)\n      },\n      _pullDownScrollHandle(pos) {\n        if (this.beforePullDown) {\n          this.bubbleY = Math.max(0, pos.y - this.pullDownHeight)\n          this.pullDownStyle = `top:${Math.min(pos.y - this.pullDownHeight, 0)}px`\n        } else {\n          this.bubbleY = 0\n          this.pullDownStyle = `top:${Math.min(pos.y - this.pullDownStop, 0)}px`\n        }\n      },\n      _pullUpLoadChangeHandler() {\n        this.$nextTick(() => {\n          this._getPullUpEleHeight()\n          this._calculateMinHeight()\n        })\n      },\n      _onPullUpLoad() {\n        this.scroll.on('pullingUp', this._pullUpHandle)\n      },\n      _offPullUpLoad() {\n        this.scroll.off('pullingUp', this._pullUpHandle)\n      },\n      _pullUpHandle() {\n        this.isPullUpLoad = true\n        this.$emit(EVENT_PULLING_UP)\n      },\n      _waitFinishPullDown(next) {\n        const {stopTime = DEFAULT_STOP_TIME} = this.pullDownRefresh\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.scroll.finishPullDown()\n            resolve()\n          }, stopTime)\n        })\n      },\n      _waitResetPullDown(dirty) {\n        return new Promise(resolve => {\n          this.resetPullDownTimer = setTimeout(() => {\n            this.pullDownStyle = `top: -${this.pullDownHeight}px`\n            this.beforePullDown = true\n            resolve()\n          }, this.scroll.options.bounceTime)\n        })\n      },\n      _getPullDownEleHeight() {\n        let pulldown = this.$refs.pulldown\n        if (!pulldown) {\n          return\n        }\n        pulldown = pulldown.firstChild\n        this.pullDownHeight = getRect(pulldown).height\n\n        this.beforePullDown = false\n        this.isPullingDown = true\n        this.$nextTick(() => {\n          this.pullDownStop = getRect(pulldown).height\n\n          this.beforePullDown = true\n          this.isPullingDown = false\n        })\n      },\n      _getPullUpEleHeight() {\n        const listWrapper = this.$refs.listWrapper\n        const pullup = listWrapper.nextElementSibling\n        if (!pullup) {\n          this.pullUpHeight = 0\n          return\n        }\n        this.pullUpHeight = getRect(pullup).height\n      }\n    },\n    components: {\n      Loading,\n      Bubble\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n\n  .cube-scroll-wrapper\n    position: relative\n    height: 100%\n    overflow: hidden\n\n  .cube-scroll-list-wrapper\n    overflow: hidden\n\n  .cube-pulldown-wrapper\n    position: absolute\n    width: 100%\n    left: 0\n    display: flex\n    justify-content: center\n    align-items: center\n    transition: all\n    .before-trigger\n      height: 54px\n      line-height: 0\n      padding-top: 6px\n    .after-trigger\n      .loading\n        padding: 8px 0\n      .cube-pulldown-loaded\n        padding: 12px 0\n\n  .cube-pullup-wrapper\n    width: 100%\n    display: flex\n    justify-content: center\n    align-items: center\n    .before-trigger\n      padding: 22px 0\n      min-height: 1em\n    .after-trigger\n      padding: 19px 0\n\n  .cube-scroll-content\n    position: relative\n    z-index: 1\n\n  .cube-scroll-item\n    height: 60px\n    line-height: 60px\n    font-size: $fontsize-large-x\n    padding-left: 20px\n</style>\n"]}]}